{"version":3,"sources":["helpers/constants.js","helpers/util.js","context/AppProvider.js","components/Board.js","components/Choice.js","components/Main.js","App.js","reportWebVitals.js","index.js"],"names":["GAME_TYPES","ICON_CHARS","PLAYER_TURNS","getEmptyCells","cells","map","val","idx","filter","item","isMoveLeft","length","checkGameState","lines","i","a","b","c","position","iconType","isTie","getRandom","start","end","Math","floor","random","replace","index","value","slice","findRandomMove","emptyCells","minimax","depth","computerType","isMax","score","evaluate","best","lengthCells","nextCells","max","min","findBestMove","bestVal","bestMove","moveVal","THINKING_TIME","AppContext","React","createContext","AppProvider","initState","gameType","currentIcon","playerTurn","Array","fill","gameState","step","state","changeType","type","icon","setState","initNewGame","humanPlay","newGame","setIcon","setIconData","initGame","timeout","clearTimeout","setTimeout","randomMove","computerPlay","applyState","prevState","nextIcon","nextPlayerTurn","makeAIMove","this","Provider","props","children","Component","Square","context","isDoneClass","className","onClick","Board","boardRef","useRef","textInfo","currentIconType","useEffect","current","classList","add","remove","ref","Choice","useState","text","history","steper","setSteper","updateStepper","data","Main","useContext","undefined","Error","useAppContext","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAAaA,EACE,EADFA,EAEM,EAQNC,EAAa,CAAC,IAAK,KAEnBC,EACJ,EADIA,EAED,E,cCdNC,EAAgB,SAACC,GACrB,OAAOA,EAAMC,KAAI,SAACC,EAAKC,GAAN,MAAc,CAACD,EAAKC,MAAMC,QAAO,SAACC,GAAD,OAAsB,OAAZA,EAAK,OAG7DC,EAAa,SAACN,GAElB,OADmBD,EAAcC,GACfO,OAAS,GAGhBC,EAAiB,SAACR,GAc7B,IAbA,IAAMS,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAKAC,EAAI,EAAGA,EAAID,EAAMF,OAAQG,IAAK,CAAC,IAAD,cACnBD,EAAMC,GADa,GAC9BC,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAGrC,GAAiB,OAAbb,EAAMW,IAAeX,EAAMW,KAAOX,EAAMY,IAAMZ,EAAMW,KAAOX,EAAMa,GAKnE,MAAO,CACLC,SALEJ,GAAK,GAAKA,GAAK,EAAW,aAASA,GAC9BA,GAAK,GAAKA,GAAK,EAAW,aAASA,EAAI,GACnC,WAAOA,EAAI,GAItBK,SAAUf,EAAMW,GAChBK,MAAO,MAKb,MAAO,CACLF,SAAU,GACVC,SAAU,KACVC,OAAOV,EAAWN,IAAS,OAIlBiB,EAAY,SAACC,EAAOC,GAC/B,OAAOD,EAAQE,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,KAGtCK,EAAU,SAACvB,EAAOwB,EAAOC,GACpC,MAAM,GAAN,mBACKzB,EAAM0B,MAAM,EAAGF,IADpB,CAEEC,GAFF,YAGKzB,EAAM0B,MAAMF,EAAQ,EAAGxB,EAAMO,WAOvBoB,EAAiB,SAAC3B,GAC7B,IAAM4B,EAAa7B,EAAcC,GAEjC,OAAI4B,EAAWrB,OAAS,EAERqB,EADIX,EAAU,EAAGW,EAAWrB,SACN,GAK/B,MA8BHsB,EAAU,SAAVA,EAAW7B,EAAO8B,EAAOC,EAAcC,GAC3C,IAAMC,EAzBS,SAACjC,EAAO+B,GAYvB,IAXA,IAAMtB,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGAC,EAAI,EAAGA,EAAID,EAAMF,OAAQG,IAAK,CAAC,IAAD,cACnBD,EAAMC,GADa,GAC9BC,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAGrC,GAAiB,OAAbb,EAAMW,IAAeX,EAAMW,KAAOX,EAAMY,IAAMZ,EAAMW,KAAOX,EAAMa,GACnE,OAAIb,EAAMW,KAAOoB,EAAqB,IAC9B,GAIZ,OAAO,EAIOG,CAASlC,EAAO+B,GAG9B,GAAc,KAAVE,EAAc,OAAOA,EAAQH,EAGjC,IAAe,KAAXG,EAAe,OAAOA,EAAQH,EAGlC,IAAKxB,EAAWN,GAAQ,OAAO,EAE/B,IACImC,EADEC,EAAcpC,EAAMO,OAI1B,GAAIyB,EAAO,CACTG,GAAQ,IAER,IAAK,IAAIzB,EAAI,EAAGA,EAAI0B,EAAa1B,IAAK,CAGpC,GAAa,OAFAV,EAAMU,GAEA,CAEjB,IAAM2B,EAAYd,EAAQvB,EAAOU,EAAGqB,GAGpCI,EAAOf,KAAKkB,IACVH,EACAN,EAAQQ,EAAWP,EAAQ,EAAGC,GAAeC,UAI9C,CACLG,EAAO,IAEP,IAAK,IAAIzB,EAAI,EAAGA,EAAI0B,EAAa1B,IAAK,CAGpC,GAAa,OAFAV,EAAMU,GAEA,CAEjB,IAAM2B,EAAYd,EAAQvB,EAAOU,EAAG,EAAIqB,GAGxCI,EAAOf,KAAKmB,IACVJ,EACAN,EAAQQ,EAAWP,EAAQ,EAAGC,GAAeC,MAMrD,OAAOG,GAGIK,EAAe,SAACxC,EAAO+B,GAMlC,IALA,IAAIU,GAAW,IACXC,EAAW,KAETN,EAAcpC,EAAMO,OAEjBG,EAAI,EAAGA,EAAI0B,EAAa1B,IAAK,CAGpC,GAAa,OAFAV,EAAMU,GAEA,CAEjB,IAAM2B,EAAYd,EAAQvB,EAAOU,EAAGqB,GAG9BY,EAAUd,EAAQQ,EAAW,EAAGN,GAAc,GAGhDY,EAAUF,IACZA,EAAUE,EACVD,EAAWhC,IAKjB,OAAOgC,GCzKHE,EAAgB,IAEhBC,EAAaC,IAAMC,gBAYJC,E,4MACnBC,UAAY,CACVC,SAAUtD,EACVuD,YAAa,EACbC,WAAY,EACZpD,MAAO,IAAIqD,MAAM,GAAGC,KAAK,MACzBC,UAAW,CACTzC,SAAU,GACVC,SAAU,KACVC,MAAO,MAETwC,KAAM,G,EAGRC,MAAQ,CACNP,SAAU,EAAKD,UAAUC,SACzBC,YAAa,EAAKF,UAAUE,YAC5BC,WAAY,EAAKH,UAAUG,WAC3BpD,MAAO,EAAKiD,UAAUjD,MACtBuD,UAAW,EAAKN,UAAUM,UAC1BC,KAAM,EAAKP,UAAUO,KACrBE,WAAY,SAACC,EAAMH,EAAMI,GACvB,EAAKC,SAAS,CAAEL,SACZ,EAAKC,MAAMP,WAAaS,GAC1B,EAAKG,YAAYH,EAAKC,IAG1BG,UAAW,SAACvC,GACV,EAAKuC,UAAUvC,IAEjBwC,QAAS,WACP,EAAKF,YAAY,EAAKL,MAAMP,WAE9Be,QAAS,SAACL,GACR,EAAKM,YAAYN,K,EAIrBK,QAAU,SAACzC,GACT,EAAKqC,SAAS,CAAEV,YAAa3B,K,EAG/B2C,SAAW,WAEP,EAAKV,MAAMP,WAAatD,GACxB,EAAK6D,MAAML,aAAetD,IAEtB,EAAKsE,SACPC,aAAa,EAAKD,SAGpB,EAAKA,QAAUE,YAAW,WACxB,IAAMC,EAAa5C,EAAe,EAAK8B,MAAMzD,OAC7C,EAAKwE,aAAaD,KACjB3B,K,EAIPkB,YAAc,WAAsD,IAArDH,EAAoD,uDAA7C,EAAKV,UAAUC,SAAUC,EAAoB,uDAAN,EAC3D,EAAKU,UACH,WACE,MAAO,CACLX,SAAUS,EACVR,cACAC,WAAYnC,EAAU,EAAG,GACzBjB,MAAO,EAAKiD,UAAUjD,MACtBuD,UAAW,EAAKN,UAAUM,cAG9B,WACE,EAAKY,e,EAKXM,WAAa,SAACC,EAAWlD,GACvB,IAAMxB,EAAQ0E,EAAU1E,MAClB2E,EAAW,EAAID,EAAUvB,YACzByB,EAAiB,EAAIF,EAAUtB,WAC/Bf,EAAYd,EAAQvB,EAAOwB,EAAOkD,EAAUvB,aAGlD,MAAO,CACLI,UAHgB/C,EAAe6B,GAI/Bc,YAAawB,EACbvB,WAAYwB,EACZ5E,MAAOqC,I,EAIX0B,UAAY,SAACvC,GAEyB,KAAlC,EAAKiC,MAAMF,UAAUzC,UACO,OAA5B,EAAK2C,MAAMzD,MAAMwB,IAChB,EAAKiC,MAAMP,WAAatD,GACvB,EAAK6D,MAAML,aAAetD,GAE5B,EAAK+D,UACH,SAACa,GACC,OAAO,EAAKD,WAAWC,EAAWlD,MAEpC,WAGsC,KAAlC,EAAKiC,MAAMF,UAAUzC,UACrB,EAAK2C,MAAMP,WAAatD,GACxB,EAAK6D,MAAML,aAAetD,GAE1BwE,YAAW,WACT,EAAKO,eACJjC,O,EAOb4B,aAAe,SAAChD,GAEsB,KAAlC,EAAKiC,MAAMF,UAAUzC,UACO,OAA5B,EAAK2C,MAAMzD,MAAMwB,IACjB,EAAKiC,MAAMP,WAAatD,GACxB,EAAK6D,MAAML,aAAetD,GAE1B,EAAK+D,UAAS,SAACa,GAAD,OAAe,EAAKD,WAAWC,EAAWlD,O,EAI5DqD,WAAa,WACX,IAAMnC,EAAWF,EAAa,EAAKiB,MAAMzD,MAAO,EAAKyD,MAAMN,aAE1C,OAAbT,GACF,EAAK8B,aAAa9B,I,kEAKpBoC,KAAKX,a,+BAIL,OACE,cAACtB,EAAWkC,SAAZ,CAAqBtD,MAAOqD,KAAKrB,MAAjC,SACGqB,KAAKE,MAAMC,e,GA/IqBC,aCnBnCC,G,MAAS,SAAC,GAAwB,IAAtB3D,EAAqB,EAArBA,MAAO4D,EAAc,EAAdA,QACjB3D,EAAQ2D,EAAQpF,MAAMwB,GACtBoC,EAAiB,OAAVnC,EAAiB5B,EAAW4B,GAJjB,GAKlB4D,EALkB,KAKJzB,EAA6B,OAAS,GAE1D,OACE,wBACE0B,UAAS,oBAAe9D,EAAf,YAAwB6D,GACjCE,QAAS,kBAAMH,EAAQrB,UAAUvC,IAFnC,SAIGoC,MAiFQ4B,EAvED,SAAC,GAAiB,IAAfJ,EAAc,EAAdA,QACTK,EAAWC,iBAAO,MACpBC,EAAW,GACTC,EAAkBR,EAAQjC,YAiChC,OA/BA0C,qBAAU,WAC2B,KAA/BT,EAAQ7B,UAAUzC,SACpBwD,YAAW,WACTmB,EAASK,QAAQC,UAAUC,IAAI,UAC9B,IAEHP,EAASK,QAAQC,UAAUE,OAAO,UAEnC,CAACb,EAAQ7B,UAAUzC,WAGpB6E,EADEP,EAAQ7B,UAAUvC,MACT,OAEPoE,EAAQlC,WAAatD,EACY,KAA/BwF,EAAQ7B,UAAUzC,SACZ,sBAAkBjB,EAAW+F,GAA7B,UAEA,iBAAa/F,EAAW,EAAI+F,GAA5B,WAGyB,KAA/BR,EAAQ7B,UAAUzC,SAChBsE,EAAQhC,aAAetD,EACjB,iBACG,qBAETsF,EAAQhC,aAAetD,EACjB,gBACG,WAKjB,uBAAMwF,UAAU,OAAhB,UACE,qBAAKA,UAAU,WAAf,SACE,wBAAQA,UAAU,MAAMC,QAAS,kBAAMH,EAAQpB,WAA/C,wBAIF,sBAAKsB,UAAS,gBAAWF,EAAQ7B,UAAUzC,UAAYoF,IAAKT,EAA5D,UACE,sBAAKH,UAAU,YAAf,UACE,cAAC,EAAD,CAAQF,QAASA,EAAS5D,MAAO,IACjC,cAAC,EAAD,CAAQ4D,QAASA,EAAS5D,MAAO,IACjC,cAAC,EAAD,CAAQ4D,QAASA,EAAS5D,MAAO,OAGnC,sBAAK8D,UAAU,YAAf,UACE,cAAC,EAAD,CAAQF,QAASA,EAAS5D,MAAO,IACjC,cAAC,EAAD,CAAQ4D,QAASA,EAAS5D,MAAO,IACjC,cAAC,EAAD,CAAQ4D,QAASA,EAAS5D,MAAO,OAGnC,sBAAK8D,UAAU,YAAf,UACE,cAAC,EAAD,CAAQF,QAASA,EAAS5D,MAAO,IACjC,cAAC,EAAD,CAAQ4D,QAASA,EAAS5D,MAAO,IACjC,cAAC,EAAD,CAAQ4D,QAASA,EAAS5D,MAAO,UAGrC,qBAAK8D,UAAU,OAAf,SAAuBK,QC/BdQ,G,MArDA,SAAC,GAAiB,IAAff,EAAc,EAAdA,QAAc,EACFgB,mBAAS,CACnC5C,KAAM,EACN6C,KAAM,wBACNC,QAAS,OAJmB,mBACvBC,EADuB,KACfC,EADe,KAOxBC,EAAgB,SAACC,GACrBF,EAAU,CAAEhD,KAAM,EAAG8C,QAASI,EAAML,KAAM,oBAG5C,OACE,sBAAKf,UAAU,SAAf,UACE,6BAAKiB,EAAOF,OACK,IAAhBE,EAAO/C,KACN,+BACE,oBACE+B,QAAS,kBAAMkB,EAAc7G,IAC7B0F,UAAW,cAAgBF,EAAQlC,SAAW,SAAW,GAF3D,2BAMA,oBACEqC,QAAS,kBAAMkB,EAAc7G,IAC7B0F,UAAW,oBAAsBF,EAAQlC,SAAW,SAAW,GAFjE,wBAQF,+BACE,oBACEqC,QAAS,kBAAMH,EAAQ1B,WAAW6C,EAAOD,QAAS,EAAG,IACrDhB,UAAW,cAAgBF,EAAQlC,SAAW,SAAW,GAF3D,eAMA,oBACEqC,QAAS,kBAAMH,EAAQ1B,WAAW6C,EAAOD,QAAS,EAAG,IACrDhB,UAAW,oBAAsBF,EAAQlC,SAAW,SAAW,GAFjE,uB,MCzBKyD,MAXf,WACE,IAAMvB,EHSc,WACpB,IAAMA,EAAUwB,qBAAW/D,GAC3B,QAAgBgE,IAAZzB,EACF,MAAM,IAAI0B,MAAM,2BAElB,OAAO1B,EGdS2B,GAEhB,OACE,sBAAKzB,UAAU,SAAf,UACoB,IAAjBF,EAAQ5B,MAAc,cAAC,EAAD,CAAQ4B,QAASA,IACtB,IAAjBA,EAAQ5B,MAAc,cAAC,EAAD,CAAO4B,QAASA,QCM9B4B,MAbf,WACE,OACE,cAAC,EAAD,UACE,sBAAK1B,UAAU,MAAf,UACE,iCACE,oBAAIA,UAAU,cAAd,2BAEF,cAAC,EAAD,UCCO2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.11cc9224.chunk.js","sourcesContent":["export const GAME_TYPES = {\n  TWO_PLAYERS: 0,\n  VERSUS_COMPUTER: 1\n}\n\nexport const ICON_TYPES = {\n  O: 0,\n  X: 1\n}\n\nexport const ICON_CHARS = ['O', 'X'];\n\nexport const PLAYER_TURNS = {\n  HUMAN: 0,\n  COMPUTER: 1\n}","const getEmptyCells = (cells) => {\n  return cells.map((val, idx) => [val, idx]).filter((item) => item[0] === null);\n};\n\nconst isMoveLeft = (cells) => {\n  const emptyCells = getEmptyCells(cells);\n  return emptyCells.length > 0;\n};\n\nexport const checkGameState = (cells) => {\n  const lines = [\n    [0, 1, 2], // h.h0\n    [3, 4, 5], // h.h1\n    [6, 7, 8], // h.h2\n    [0, 3, 6], // v.v0\n    [1, 4, 7], // v.v1\n    [2, 5, 8], // v.v2\n    [0, 4, 8], // d.d0\n    [2, 4, 6], // d.d1\n  ];\n\n  let position = \"\";\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (cells[a] !== null && cells[a] === cells[b] && cells[a] === cells[c]) {\n      if (i >= 0 && i <= 2) position = `h h${i}`;\n      else if (i >= 3 && i <= 5) position = `v v${i - 3}`;\n      else position = `d${i - 6}`;\n\n      return {\n        position,\n        iconType: cells[a],\n        isTie: null,\n      };\n    }\n  }\n\n  return {\n    position: \"\",\n    iconType: null,\n    isTie: isMoveLeft(cells) ? null : true,\n  };\n};\n\nexport const getRandom = (start, end) => {\n  return start + Math.floor(Math.random() * (end - start));\n};\n\nexport const replace = (cells, index, value) => {\n  return [\n    ...cells.slice(0, index),\n    value,\n    ...cells.slice(index + 1, cells.length),\n  ];\n};\n\n/**\n * Random move\n */\nexport const findRandomMove = (cells) => {\n  const emptyCells = getEmptyCells(cells);\n\n  if (emptyCells.length > 0) {\n    const randomNum = getRandom(0, emptyCells.length);\n    const index = emptyCells[randomNum][1];\n\n    return index;\n  }\n\n  return null;\n};\n\n/**\n * Find best move based on Minimax algorithm\n */\nconst evaluate = (cells, computerType) => {\n  const lines = [\n    [0, 1, 2], // h.h0\n    [3, 4, 5], // h.h1\n    [6, 7, 8], // h.h2\n    [0, 3, 6], // v.v0\n    [1, 4, 7], // v.v1\n    [2, 5, 8], // v.v2\n    [0, 4, 8], // d.d0\n    [2, 4, 6], // d.d1\n  ];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (cells[a] !== null && cells[a] === cells[b] && cells[a] === cells[c]) {\n      if (cells[a] === computerType) return 10;\n      return -10;\n    }\n  }\n\n  return 0;\n};\n\nconst minimax = (cells, depth, computerType, isMax) => {\n  const score = evaluate(cells, computerType);\n\n  // If Maximizer has won the game return his/her evaluated score\n  if (score === 10) return score - depth;\n\n  // If Minimizer has won the game return his/her evaluated score\n  if (score === -10) return score + depth;\n\n  // If there are no more moves and no winner then it is a tie\n  if (!isMoveLeft(cells)) return 0;\n\n  const lengthCells = cells.length;\n  let best;\n\n  // If this maximizer's move\n  if (isMax) {\n    best = -1000;\n\n    for (let i = 0; i < lengthCells; i++) {\n      const cell = cells[i];\n\n      if (cell === null) {\n        // Make a move\n        const nextCells = replace(cells, i, computerType);\n\n        // Call minimax recursively and choose the maximum value\n        best = Math.max(\n          best,\n          minimax(nextCells, depth + 1, computerType, !isMax)\n        );\n      }\n    }\n  } else {\n    best = 1000;\n\n    for (let i = 0; i < lengthCells; i++) {\n      const cell = cells[i];\n\n      if (cell === null) {\n        // Make a move\n        const nextCells = replace(cells, i, 1 - computerType);\n\n        // Call minimax recursively and choose the minimum value\n        best = Math.min(\n          best,\n          minimax(nextCells, depth + 1, computerType, !isMax)\n        );\n      }\n    }\n  }\n\n  return best;\n};\n\nexport const findBestMove = (cells, computerType) => {\n  let bestVal = -1000;\n  let bestMove = null;\n\n  const lengthCells = cells.length;\n\n  for (let i = 0; i < lengthCells; i++) {\n    const cell = cells[i];\n\n    if (cell === null) {\n      // Make a move\n      const nextCells = replace(cells, i, computerType);\n\n      // Compute evaluation function for this move.\n      const moveVal = minimax(nextCells, 0, computerType, false);\n\n      // If the value of the current move is more than the best value, then update best\n      if (moveVal > bestVal) {\n        bestVal = moveVal;\n        bestMove = i;\n      }\n    }\n  }\n\n  return bestMove;\n};\n","import React, { Component, useContext } from \"react\";\nimport { GAME_TYPES, PLAYER_TURNS } from \"./../helpers/constants\";\n\nimport {\n  checkGameState,\n  getRandom,\n  replace,\n  findBestMove,\n  findRandomMove,\n} from \"./../helpers/util\";\n\nconst THINKING_TIME = 500;\n\nconst AppContext = React.createContext();\n\nconst useAppContext = () => {\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error(\"useContext Not Defined!\");\n  }\n  return context;\n};\n\nexport { useAppContext, AppContext };\n\nexport default class AppProvider extends Component {\n  initState = {\n    gameType: GAME_TYPES.TWO_PLAYERS,\n    currentIcon: 0,\n    playerTurn: 0,\n    cells: new Array(9).fill(null),\n    gameState: {\n      position: \"\",\n      iconType: null,\n      isTie: null,\n    },\n    step: 1,\n  };\n\n  state = {\n    gameType: this.initState.gameType,\n    currentIcon: this.initState.currentIcon,\n    playerTurn: this.initState.playerTurn,\n    cells: this.initState.cells,\n    gameState: this.initState.gameState,\n    step: this.initState.step,\n    changeType: (type, step, icon) => {\n      this.setState({ step });\n      if (this.state.gameType !== type) {\n        this.initNewGame(type,icon);\n      }\n    },\n    humanPlay: (index) => {\n      this.humanPlay(index);\n    },\n    newGame: () => {\n      this.initNewGame(this.state.gameType);\n    },\n    setIcon: (icon) => {\n      this.setIconData(icon);\n    },\n  };\n\n  setIcon = (index) => {\n    this.setState({ currentIcon: index });\n  };\n\n  initGame = () => {\n    if (\n      this.state.gameType === GAME_TYPES.VERSUS_COMPUTER &&\n      this.state.playerTurn === PLAYER_TURNS.COMPUTER\n    ) {\n      if (this.timeout) {\n        clearTimeout(this.timeout);\n      }\n\n      this.timeout = setTimeout(() => {\n        const randomMove = findRandomMove(this.state.cells);\n        this.computerPlay(randomMove);\n      }, THINKING_TIME);\n    }\n  };\n\n  initNewGame = (type = this.initState.gameType ,currentIcon = 0) => {\n    this.setState(\n      () => {\n        return {\n          gameType: type,\n          currentIcon,\n          playerTurn: getRandom(0, 2),\n          cells: this.initState.cells,\n          gameState: this.initState.gameState,\n        };\n      },\n      () => {\n        this.initGame();\n      }\n    );\n  };\n\n  applyState = (prevState, index) => {\n    const cells = prevState.cells;\n    const nextIcon = 1 - prevState.currentIcon;\n    const nextPlayerTurn = 1 - prevState.playerTurn;\n    const nextCells = replace(cells, index, prevState.currentIcon);\n    const gameState = checkGameState(nextCells);\n\n    return {\n      gameState: gameState,\n      currentIcon: nextIcon,\n      playerTurn: nextPlayerTurn,\n      cells: nextCells,\n    };\n  };\n\n  humanPlay = (index) => {\n    if (\n      this.state.gameState.position === \"\" &&\n      this.state.cells[index] === null &&\n      (this.state.gameType === GAME_TYPES.TWO_PLAYERS ||\n        this.state.playerTurn === PLAYER_TURNS.HUMAN)\n    ) {\n      this.setState(\n        (prevState) => {\n          return this.applyState(prevState, index);\n        },\n        () => {\n          // Make a move for computer if the game is in 'versus computer' mode\n          if (\n            this.state.gameState.position === \"\" &&\n            this.state.gameType === GAME_TYPES.VERSUS_COMPUTER &&\n            this.state.playerTurn === PLAYER_TURNS.COMPUTER\n          ) {\n            setTimeout(() => {\n              this.makeAIMove();\n            }, THINKING_TIME);\n          }\n        }\n      );\n    }\n  };\n\n  computerPlay = (index) => {\n    if (\n      this.state.gameState.position === \"\" &&\n      this.state.cells[index] === null &&\n      this.state.gameType === GAME_TYPES.VERSUS_COMPUTER &&\n      this.state.playerTurn === PLAYER_TURNS.COMPUTER\n    ) {\n      this.setState((prevState) => this.applyState(prevState, index));\n    }\n  };\n\n  makeAIMove = () => {\n    const bestMove = findBestMove(this.state.cells, this.state.currentIcon);\n\n    if (bestMove !== null) {\n      this.computerPlay(bestMove);\n    }\n  };\n\n  componentDidMount() {\n    this.initGame();\n  }\n\n  render() {\n    return (\n      <AppContext.Provider value={this.state}>\n        {this.props.children}\n      </AppContext.Provider>\n    );\n  }\n}\n","import React, { useRef, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { ICON_CHARS, GAME_TYPES, PLAYER_TURNS } from \"../helpers/constants\";\nimport \"./Board.css\";\nconst ICON_PLACE_HOLDER = \"\";\n\nconst Square = ({ index, context }) => {\n  const value = context.cells[index];\n  const icon = value !== null ? ICON_CHARS[value] : ICON_PLACE_HOLDER;\n  const isDoneClass = icon !== ICON_PLACE_HOLDER ? \"done\" : \"\";\n\n  return (\n    <button\n      className={`cell cell-${index} ${isDoneClass}`}\n      onClick={() => context.humanPlay(index)}\n    >\n      {icon}\n    </button>\n  );\n};\n\nSquare.propTypes = {\n  context: PropTypes.object,\n  index: PropTypes.number.isRequired\n};\n\nconst Board = ({ context }) => {\n  const boardRef = useRef(null);\n  let textInfo = \"\";\n  const currentIconType = context.currentIcon;\n\n  useEffect(() => {\n    if (context.gameState.position !== \"\") {\n      setTimeout(() => {\n        boardRef.current.classList.add(\"full\");\n      }, 50);\n    } else {\n      boardRef.current.classList.remove(\"full\");\n    }\n  }, [context.gameState.position]);\n\n  if (context.gameState.isTie) {\n    textInfo = \"Tie!\";\n  } else {\n    if (context.gameType === GAME_TYPES.TWO_PLAYERS) {\n      if (context.gameState.position === \"\") {\n        textInfo = `It's player(${ICON_CHARS[currentIconType]}) turn`;\n      } else {\n        textInfo = `Player(${ICON_CHARS[1 - currentIconType]}) wins!`;\n      }\n    } else {\n      if (context.gameState.position === \"\") {\n        if (context.playerTurn === PLAYER_TURNS.HUMAN)\n          textInfo = `It's your turn`;\n        else textInfo = `It's computer turn`;\n      } else {\n        if (context.playerTurn === PLAYER_TURNS.HUMAN)\n          textInfo = `Computer win!`;\n        else textInfo = `You win!`;\n      }\n    }\n  }\n  return (\n    <main className=\"main\">\n      <div className=\"new-game\">\n        <button className=\"btn\" onClick={() => context.newGame()}>\n          New Game\n        </button>\n      </div>\n      <div className={`board ${context.gameState.position}`} ref={boardRef}>\n        <div className=\"board-row\">\n          <Square context={context} index={0} />\n          <Square context={context} index={1} />\n          <Square context={context} index={2} />\n        </div>\n\n        <div className=\"board-row\">\n          <Square context={context} index={3} />\n          <Square context={context} index={4} />\n          <Square context={context} index={5} />\n        </div>\n\n        <div className=\"board-row\">\n          <Square context={context} index={6} />\n          <Square context={context} index={7} />\n          <Square context={context} index={8} />\n        </div>\n      </div>\n      <div className=\"info\">{textInfo}</div>\n    </main>\n  );\n};\n\nBoard.propTypes = {\n  context: PropTypes.object,\n};\n\nexport default Board;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { GAME_TYPES } from \"../helpers/constants\";\nimport \"./choice.css\";\nconst Choice = ({ context }) => {\n  const [steper, setSteper] = useState({\n    step: 1,\n    text: \"Choose Your Play Mode\",\n    history: null,\n  });\n\n  const updateStepper = (data) => {\n    setSteper({ step: 2, history: data, text: \"Pick Your Side\" });\n  };\n\n  return (\n    <div className=\"choice\">\n      <h1>{steper.text}</h1>\n      {steper.step === 1 ? (\n        <ul>\n          <li\n            onClick={() => updateStepper(GAME_TYPES.TWO_PLAYERS)}\n            className={\"2 Players\" === context.gameType ? \"active\" : \"\"}\n          >\n            With a friend\n          </li>\n          <li\n            onClick={() => updateStepper(GAME_TYPES.VERSUS_COMPUTER)}\n            className={\"Versus Computer\" === context.gameType ? \"active\" : \"\"}\n          >\n            With AI\n          </li>\n        </ul>\n      ) : (\n        <ul>\n          <li\n            onClick={() => context.changeType(steper.history, 2, 1)}\n            className={\"2 Players\" === context.gameType ? \"active\" : \"\"}\n          >\n            X\n          </li>\n          <li\n            onClick={() => context.changeType(steper.history, 2, 0)}\n            className={\"Versus Computer\" === context.gameType ? \"active\" : \"\"}\n          >\n            0\n          </li>\n        </ul>\n      )}\n    </div>\n  );\n};\n\nChoice.propTypes = {\n  context: PropTypes.object.isRequired,\n};\n\nexport default Choice;\n","import React from \"react\";\nimport { useAppContext } from \"./../context/AppProvider\";\nimport Board from \"./Board\";\nimport Choice from \"./Choice\";\nimport './main.css'\nfunction Main() {\n  const context = useAppContext();\n\n  return (\n    <div className=\"layout\">\n      {context.step === 1 && <Choice context={context} />}\n      {context.step === 2 && <Board context={context} />}\n    </div>\n  );\n}\n\nexport default Main;\n","import \"./App.css\";\nimport Main from \"./components/Main\";\nimport AppProvider from \"./context/AppProvider\";\n\nfunction App() {\n  return (\n    <AppProvider>\n      <div className=\"app\">\n        <header>\n          <h1 className=\"text-center\">Tic Tac Toe</h1>\n        </header>\n        <Main />\n      </div>\n    </AppProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}